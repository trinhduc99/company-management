version: '3'

######### Services ###################################

services:
  # Server container
  nginx:
    build:
      context: docker/dev/nginx
      dockerfile: Dockerfile
    ports:
      # Nuxt port
      - 8080:80
      # Laravel port
      - 8081:81
    volumes:
      - ./:/var/www
      - ./docker/dev/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/dev/nginx/logs:/var/log/nginx
    depends_on:
      - client
      - php
    networks:
      - app-network

  # PHP FastCGI Process Manager container
  php:
    build:
      context: docker/dev/php
      dockerfile: Dockerfile
    volumes:
      - ./api:/var/www/api
    environment:
      # If you down want to use xDebug, set remote_enable=0
      XDEBUG_CONFIG: "remote_enable=0"
      PHP_IDE_CONFIG: "serverName=Docker"
    depends_on:
      - db
      - redis
      - mailhog
    networks:
      - app-network
  

  # Supervisor container (schedule and queue runner)
  supervisor:
    build:
      context: docker/dev/supervisor
      dockerfile: Dockerfile
    volumes:
      - ./:/var/www/
      - ./docker/dev/supervisor/conf.d:/etc/supervisor/conf.d
      - ./docker/dev/supervisor/logs:/var/log
    networks:
      - app-network
    depends_on:
      - redis
      - mailhog

  #MySQL Service
  db:
    image: mysql:8.0
    restart: unless-stopped
    tty: true
    ports:
      - "33061:3306"
    environment:
      MYSQL_USER: app
      MYSQL_PASSWORD: app
      MYSQL_DATABASE: app
      MYSQL_ROOT_PASSWORD: app
    volumes:
      - database:/var/lib/mysql
    networks:
      - app-network

  # Redis container
  redis:
    build:
      context: docker/dev/redis
      dockerfile: Dockerfile
    volumes:
      - redis:/data
    ports:
      - 63791:6379
    networks:
      - app-network

  # Mailhog container (SMTP testing)
  mailhog:
    build:
      context: docker/dev/mailhog
      dockerfile: Dockerfile
    ports:
      - 8026:8025
    networks:
      - app-network

  # Client container
  client:
    build:
      context: docker/dev/client
      dockerfile: Dockerfile
    volumes:
      - ./client:/var/www/client
    networks:
      - app-network

######### Volumes ###################################

volumes:
  database:
    driver: local
  redis:
    driver: local

#Docker Networks
networks:
  app-network:
    driver: bridge
